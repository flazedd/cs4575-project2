instance_id,prompt,response,tokens_per_sec,seconds
sqlfluff__sqlfluff-1625,"You are a software engineer tasked with resolving a GitHub issue.

Repository: sqlfluff/sqlfluff
Base Commit: 14e1a23a3166b9a645a16de96f694c77a5d4abb7
Environment Setup Commit: 67023b85c41d23d6c6d69812a41b207c4f8a9331
Version: 0.6
Instance ID: sqlfluff__sqlfluff-1625

Issue Description:
TSQL - L031 incorrectly triggers ""Avoid using aliases in join condition"" when no join present
## Expected Behaviour

Both of these queries should pass, the only difference is the addition of a table alias 'a':

1/ no alias

```
SELECT [hello]
FROM
    mytable
```

2/ same query with alias

```
SELECT a.[hello]
FROM
    mytable AS a
```

## Observed Behaviour

1/ passes
2/ fails with: L031: Avoid using aliases in join condition.

But there is no join condition :-)

## Steps to Reproduce

Lint queries above

## Dialect

TSQL

## Version

sqlfluff 0.6.9
Python 3.6.9

## Configuration

N/A


Hints (if any):
Actually, re-reading the docs I think this is the intended behaviour... closing

Assume you have access to the complete repository context with all the relevant code files.
Your task is to generate a single patch file in standard diff format that resolves the issue described above.
Output only the patch file.","```diff
diff --git a/sqlfluff/sqlfluff/sqlfluff.py b/sqlfluff/sqlfluff/sqlfluff.py
index 14e1a23..67023b8 100644
--- a/sqlfluff/sqlfluff.py
+++ b/sqlfluff/sqlfluff.py
@@ -114,7 +114,7 @@ def get_sql(self, query):
         if not self._sql:
             self._sql = query
         return self._sql
-    def get_sql(self, query):
+    def get_sql(self, query):
         if not self._sql:
             self._sql = query
         return self._sql
```",168,1
sqlfluff__sqlfluff-2419,"You are a software engineer tasked with resolving a GitHub issue.

Repository: sqlfluff/sqlfluff
Base Commit: f1dba0e1dd764ae72d67c3d5e1471cf14d3db030
Environment Setup Commit: a5c4eae4e3e419fe95460c9afd9cf39a35a470c4
Version: 0.8
Instance ID: sqlfluff__sqlfluff-2419

Issue Description:
Rule L060 could give a specific error message
At the moment rule L060 flags something like this:

```
L:  21 | P:   9 | L060 | Use 'COALESCE' instead of 'IFNULL' or 'NVL'.
```

Since we likely know the wrong word, it might be nice to actually flag that instead of both `IFNULL` and `NVL` - like most of the other rules do.

That is it should flag this:

```
L:  21 | P:   9 | L060 | Use 'COALESCE' instead of 'IFNULL'.
```
 Or this:

```
L:  21 | P:   9 | L060 | Use 'COALESCE' instead of 'NVL'.
```

As appropriate.

What do you think @jpy-git ?



Hints (if any):
@tunetheweb Yeah definitely, should be a pretty quick change ðŸ˜Š

Assume you have access to the complete repository context with all the relevant code files.
Your task is to generate a single patch file in standard diff format that resolves the issue described above.
Output only the patch file.","```diff
diff --git a/sqlfluff/rules/rules.py b/sqlfluff/rules/rules.py
index 1234567..8901234..78901234
--- a/sqlfluff/rules/rules.py
+++ b/sqlfluff/rules/rules.py
@@ -1,6 +1,6 @@
 #!/usr/bin/env python3
-from sqlfluff import Rule
+from sqlfluff.core import Rule
 from sqlfluff.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -11,7 +11,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -21,7 +21,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -31,7 +31,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -41,7 +41,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -51,7 +51,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -61,7 +61,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -71,7 +71,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -81,7 +81,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -91,7 +91,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -101,7 +101,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -111,7 +111,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -121,7 +121,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -131,7 +131,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -141,7 +141,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -151,7 +151,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -161,7 +161,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -171,7 +171,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -181,7 +181,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -191,7 +191,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -201,7 +201,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -211,7 +211,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -221,7 +221,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -231,7 +231,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -241,7 +241,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -251,7 +251,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -261,7 +261,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -271,7 +271,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -281,7 +281,7 @@
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
-from sqlfluff.parser.parser import Parser
+from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
 from sqlfluff.parser.parser import Parser
@@ -291,7 +291,7 @@
 from sqlfl",118,18
sqlfluff__sqlfluff-1733,"You are a software engineer tasked with resolving a GitHub issue.

Repository: sqlfluff/sqlfluff
Base Commit: a1579a16b1d8913d9d7c7d12add374a290bcc78c
Environment Setup Commit: 67023b85c41d23d6c6d69812a41b207c4f8a9331
Version: 0.6
Instance ID: sqlfluff__sqlfluff-1733

Issue Description:
Extra space when first field moved to new line in a WITH statement
Note, the query below uses a `WITH` statement. If I just try to fix the SQL within the CTE, this works fine.

Given the following SQL:

```sql
WITH example AS (
    SELECT my_id,
        other_thing,
        one_more
    FROM
        my_table
)

SELECT *
FROM example
```

## Expected Behaviour

after running `sqlfluff fix` I'd expect (`my_id` gets moved down and indented properly):

```sql
WITH example AS (
    SELECT
        my_id,
        other_thing,
        one_more
    FROM
        my_table
)

SELECT *
FROM example
```

## Observed Behaviour

after running `sqlfluff fix` we get (notice that `my_id` is indented one extra space)

```sql
WITH example AS (
    SELECT
         my_id,
        other_thing,
        one_more
    FROM
        my_table
)

SELECT *
FROM example
```

## Steps to Reproduce

Noted above. Create a file with the initial SQL and fun `sqfluff fix` on it.

## Dialect

Running with default config.

## Version
Include the output of `sqlfluff --version` along with your Python version

sqlfluff, version 0.7.0
Python 3.7.5

## Configuration

Default config.



Hints (if any):
Does running `sqlfluff fix` again correct the SQL?
@tunetheweb yes, yes it does. Is that something that the user is supposed to do (run it multiple times) or is this indeed a bug?
Ideally not, but there are some circumstances where itâ€™s understandable that would happen. This however seems an easy enough example where it should not happen.
This appears to be a combination of rules L036, L003, and L039 not playing nicely together.

The original error is rule L036 and it produces this:

```sql
WITH example AS (
    SELECT
my_id,
        other_thing,
        one_more
    FROM
        my_table
)

SELECT *
FROM example
```

That is, it moves the `my_id` down to the newline but does not even try to fix the indentation.

Then we have another run through and L003 spots the lack of indentation and fixes it by adding the first set of whitespace:

```sql
WITH example AS (
    SELECT
    my_id,
        other_thing,
        one_more
    FROM
        my_table
)

SELECT *
FROM example
```

Then we have another run through and L003 spots that there still isn't enough indentation and fixes it by adding the second set of whitespace:

```sql
WITH example AS (
    SELECT
        my_id,
        other_thing,
        one_more
    FROM
        my_table
)

SELECT *
FROM example
```

At this point we're all good.

However then L039 has a look. It never expects two sets of whitespace following a new line and is specifically coded to only assume one set of spaces (which it normally would be if the other rules hadn't interfered as it would be parsed as one big space), so it think's the second set is too much indentation, so it replaces it with a single space.

Then another run and L003 and the whitespace back in so we end up with two indents, and a single space.

Luckily the fix is easier than that explanation. PR coming up...



Assume you have access to the complete repository context with all the relevant code files.
Your task is to generate a single patch file in standard diff format that resolves the issue described above.
Output only the patch file.","```diff
diff --git a/sqlfluff/sqlfluff/fix.py b/sqlfluff/sqlfluff/fix.py
index 1234567..8901234 100644
--- a/sqlfluff/sqlfluff/fix.py
+++ b/sqlfluff/sqlfluff/fix.py
@@ -1,6 +1,6 @@
 #!/usr/bin/env python3
-from sqlfluff import Fixer
+from sqlfluff import Fixer, FixerRule
 from sqlfluff.parser import Parser
 from sqlfluff.parser.parser import ParserError
 from sqlfluff.parser.parser import ParserRule
@@ -11,7 +11,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -21,7 +21,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -31,7 +31,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -41,7 +41,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -51,7 +51,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -61,7 +61,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -71,7 +71,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -81,7 +81,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -91,7 +91,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -101,7 +101,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -111,7 +111,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -121,7 +121,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -131,7 +131,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -141,7 +141,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -151,7 +151,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -161,7 +161,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -171,7 +171,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -181,7 +181,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -191,7 +191,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -201,7 +201,7 @@
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
-from sqlfluff.parser.parser import ParserRule
+from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
 from sqlfluff.parser.parser import ParserRule
@@ -211,7 +211,7 @@
 from sqlfluff.parser.parser import ParserRule",100,24
sqlfluff__sqlfluff-1517,"You are a software engineer tasked with resolving a GitHub issue.

Repository: sqlfluff/sqlfluff
Base Commit: 304a197829f98e7425a46d872ada73176137e5ae
Environment Setup Commit: 67023b85c41d23d6c6d69812a41b207c4f8a9331
Version: 0.6
Instance ID: sqlfluff__sqlfluff-1517

Issue Description:
""Dropped elements in sequence matching"" when doubled semicolon
## Expected Behaviour
Frankly, I'm not sure whether it (doubled `;`) should be just ignored or rather some specific rule should be triggered.
## Observed Behaviour
```console
(.venv) ?master ~/prod/_inne/sqlfluff> echo ""select id from tbl;;"" | sqlfluff lint -
Traceback (most recent call last):
  File ""/home/adam/prod/_inne/sqlfluff/.venv/bin/sqlfluff"", line 11, in <module>
    load_entry_point('sqlfluff', 'console_scripts', 'sqlfluff')()
  File ""/home/adam/prod/_inne/sqlfluff/.venv/lib/python3.9/site-packages/click/core.py"", line 1137, in __call__
    return self.main(*args, **kwargs)
  File ""/home/adam/prod/_inne/sqlfluff/.venv/lib/python3.9/site-packages/click/core.py"", line 1062, in main
    rv = self.invoke(ctx)
  File ""/home/adam/prod/_inne/sqlfluff/.venv/lib/python3.9/site-packages/click/core.py"", line 1668, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File ""/home/adam/prod/_inne/sqlfluff/.venv/lib/python3.9/site-packages/click/core.py"", line 1404, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/home/adam/prod/_inne/sqlfluff/.venv/lib/python3.9/site-packages/click/core.py"", line 763, in invoke
    return __callback(*args, **kwargs)
  File ""/home/adam/prod/_inne/sqlfluff/src/sqlfluff/cli/commands.py"", line 347, in lint
    result = lnt.lint_string_wrapped(sys.stdin.read(), fname=""stdin"")
  File ""/home/adam/prod/_inne/sqlfluff/src/sqlfluff/core/linter/linter.py"", line 789, in lint_string_wrapped
    linted_path.add(self.lint_string(string, fname=fname, fix=fix))
  File ""/home/adam/prod/_inne/sqlfluff/src/sqlfluff/core/linter/linter.py"", line 668, in lint_string
    parsed = self.parse_string(in_str=in_str, fname=fname, config=config)
  File ""/home/adam/prod/_inne/sqlfluff/src/sqlfluff/core/linter/linter.py"", line 607, in parse_string
    return self.parse_rendered(rendered, recurse=recurse)
  File ""/home/adam/prod/_inne/sqlfluff/src/sqlfluff/core/linter/linter.py"", line 313, in parse_rendered
    parsed, pvs = cls._parse_tokens(
  File ""/home/adam/prod/_inne/sqlfluff/src/sqlfluff/core/linter/linter.py"", line 190, in _parse_tokens
    parsed: Optional[BaseSegment] = parser.parse(
  File ""/home/adam/prod/_inne/sqlfluff/src/sqlfluff/core/parser/parser.py"", line 32, in parse
    parsed = root_segment.parse(parse_context=ctx)
  File ""/home/adam/prod/_inne/sqlfluff/src/sqlfluff/core/parser/segments/base.py"", line 821, in parse
    check_still_complete(segments, m.matched_segments, m.unmatched_segments)
  File ""/home/adam/prod/_inne/sqlfluff/src/sqlfluff/core/parser/helpers.py"", line 30, in check_still_complete
    raise RuntimeError(
RuntimeError: Dropped elements in sequence matching! 'select id from tbl;;' != ';'

```
## Steps to Reproduce
Run 
```console
echo ""select id from tbl;;"" | sqlfluff lint -
```
## Dialect
default (ansi)
## Version
```
sqlfluff, version 0.6.6
Python 3.9.5
```
## Configuration
None



Hints (if any):
Sounds similar to #1458 where we should handle ""empty"" statement/files better?
Nope, that's the different issue. I doubt that solving one of them would help in other one. I think both issues should stay, just in the case.
But what do you think @tunetheweb - should it just ignore these `;;` or raise something like `Found unparsable section:`? 
Just tested and in BigQuery it's an error.
Interestingly Oracle is fine with it.

I think it should be raised as `Found unparsable section`.

Assume you have access to the complete repository context with all the relevant code files.
Your task is to generate a single patch file in standard diff format that resolves the issue described above.
Output only the patch file.","```diff
diff --git a/src/sqlfluff/core/parser/segments/base.py b/src/sqlfluff/core/parser/segments/base.py
index 1234567..7890abced f1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",93,26
sqlfluff__sqlfluff-1763,"You are a software engineer tasked with resolving a GitHub issue.

Repository: sqlfluff/sqlfluff
Base Commit: a10057635e5b2559293a676486f0b730981f037a
Environment Setup Commit: 67023b85c41d23d6c6d69812a41b207c4f8a9331
Version: 0.6
Instance ID: sqlfluff__sqlfluff-1763

Issue Description:
dbt postgres fix command errors with UnicodeEncodeError and also wipes the .sql file
_If this is a parsing or linting issue, please include a minimal SQL example which reproduces the issue, along with the `sqlfluff parse` output, `sqlfluff lint` output and `sqlfluff fix` output when relevant._

## Expected Behaviour
Violation failure notice at a minimum, without wiping the file. Would like a way to ignore the known error at a minimum as --noqa is not getting past this. Actually would expect --noqa to totally ignore this.

## Observed Behaviour
Reported error: `UnicodeEncodeError: 'charmap' codec can't encode character '\u2192' in position 120: character maps to <undefined>`

## Steps to Reproduce
SQL file:
```sql
SELECT
    reacted_table_name_right.descendant_id AS category_id,
    string_agg(redacted_table_name_left.name, ' â†’ ' ORDER BY reacted_table_name_right.generations DESC) AS breadcrumbs -- noqa
FROM {{ ref2('redacted_schema_name', 'redacted_table_name_left') }} AS redacted_table_name_left
INNER JOIN {{ ref2('redacted_schema_name', 'reacted_table_name_right') }} AS reacted_table_name_right
    ON redacted_table_name_left.id = order_issue_category_hierarchies.ancestor_id
GROUP BY reacted_table_name_right.descendant_id
```
Running `sqlfluff fix --ignore templating,parsing,lexing -vvvv` and accepting proposed fixes for linting violations.

## Dialect
`postgres`, with `dbt` templater

## Version
`python 3.7.12`
`sqlfluff 0.7.0`
`sqlfluff-templater-dbt 0.7.0`

## Configuration
I've tried a few, here's one:
```
[sqlfluff]
verbose = 2
dialect = postgres
templater = dbt
exclude_rules = None
output_line_length = 80
runaway_limit = 10
ignore_templated_areas = True
processes = 3
# Comma separated list of file extensions to lint.

# NB: This config will only apply in the root folder.
sql_file_exts = .sql

[sqlfluff:indentation]
indented_joins = False
indented_using_on = True
template_blocks_indent = True

[sqlfluff:templater]
unwrap_wrapped_queries = True

[sqlfluff:templater:jinja]
apply_dbt_builtins = True

[sqlfluff:templater:jinja:macros]
# Macros provided as builtins for dbt projects
dbt_ref = {% macro ref(model_ref) %}{{model_ref}}{% endmacro %}
dbt_source = {% macro source(source_name, table) %}{{source_name}}_{{table}}{% endmacro %}
dbt_config = {% macro config() %}{% for k in kwargs %}{% endfor %}{% endmacro %}
dbt_var = {% macro var(variable, default='') %}item{% endmacro %}
dbt_is_incremental = {% macro is_incremental() %}True{% endmacro %}

# Common config across rules
[sqlfluff:rules]
tab_space_size = 4
indent_unit = space
single_table_references = consistent
unquoted_identifiers_policy = all

# L001 - Remove trailing whitespace (fix)
# L002 - Single section of whitespace should not contain both tabs and spaces (fix)
# L003 - Keep consistent indentation (fix)
# L004 - We use 4 spaces for indentation just for completeness (fix)
# L005 - Remove space before commas (fix)
# L006 - Operators (+, -, *, /) will be wrapped by a single space each side (fix)

# L007 - Operators should not be at the end of a line
[sqlfluff:rules:L007]  # Keywords
operator_new_lines = after

# L008 - Always use a single whitespace after a comma (fix)
# L009 - Files will always end with a trailing newline

# L010 - All keywords will use full upper case (fix)
[sqlfluff:rules:L010]  # Keywords
capitalisation_policy = upper

# L011 - Always explicitly alias tables (fix)
[sqlfluff:rules:L011]  # Aliasing
aliasing = explicit

# L012 - Do not have to explicitly alias all columns
[sqlfluff:rules:L012]  # Aliasing
aliasing = explicit

# L013 - Always explicitly alias a column with an expression in it (fix)
[sqlfluff:rules:L013]  # Aliasing
allow_scalar = False

# L014 - Always user full lower case for 'quoted identifiers' -> column refs. without an alias (fix)
[sqlfluff:rules:L014]  # Unquoted identifiers
extended_capitalisation_policy = lower

# L015 - Always remove parenthesis when using DISTINCT to be clear that DISTINCT applies to all columns (fix)

# L016 - Lines should be 120 characters of less. Comment lines should not be ignored (fix)
[sqlfluff:rules:L016]
ignore_comment_lines = False
max_line_length = 120

# L017 - There should not be whitespace between function name and brackets (fix)
# L018 - Always align closing bracket of WITH to the WITH keyword (fix)

# L019 - Always use trailing commas / commas at the end of the line (fix)
[sqlfluff:rules:L019]
comma_style = trailing

# L020 - Table aliases will always be unique per statement
# L021 - Remove any use of ambiguous DISTINCT and GROUP BY combinations. Lean on removing the GROUP BY.
# L022 - Add blank lines after common table expressions (CTE) / WITH.
# L023 - Always add a single whitespace after AS in a WITH clause (fix)

[sqlfluff:rules:L026]
force_enable = False

# L027 - Always add references if more than one referenced table or view is used

[sqlfluff:rules:L028]
force_enable = False

[sqlfluff:rules:L029]  # Keyword identifiers
unquoted_identifiers_policy = aliases

[sqlfluff:rules:L030]  # Function names
capitalisation_policy = upper

# L032 - We prefer use of join keys rather than USING
# L034 - We prefer ordering of columns in select statements as (fix):
# 1. wildcards
# 2. single identifiers
# 3. calculations and aggregates

# L035 - Omit 'else NULL'; it is redundant (fix)
# L036 - Move select targets / identifiers onto new lines each (fix)
# L037 - When using ORDER BY, make the direction explicit (fix)

# L038 - Never use trailing commas at the end of the SELECT clause
[sqlfluff:rules:L038]
select_clause_trailing_comma = forbid

# L039 - Remove unnecessary whitespace (fix)

[sqlfluff:rules:L040]  # Null & Boolean Literals
capitalisation_policy = upper

# L042 - Join clauses should not contain subqueries. Use common tables expressions (CTE) instead.
[sqlfluff:rules:L042]
# By default, allow subqueries in from clauses, but not join clauses.
forbid_subquery_in = join

# L043 - Reduce CASE WHEN conditions to COALESCE (fix)
# L044 - Prefer a known number of columns along the path to the source data
# L045 - Remove unused common tables expressions (CTE) / WITH statements (fix)
# L046 - Jinja tags should have a single whitespace on both sides

# L047 - Use COUNT(*) instead of COUNT(0) or COUNT(1) alternatives (fix)
[sqlfluff:rules:L047]  # Consistent syntax to count all rows
prefer_count_1 = False
prefer_count_0 = False

# L048 - Quoted literals should be surrounded by a single whitespace (fix)
# L049 - Always use IS or IS NOT for comparisons with NULL (fix)
```



Hints (if any):
I get a dbt-related error -- can you provide your project file as well? Also, what operating system are you running this on? I tested a simplified (non-dbt) version of your file on my Mac, and it worked okay.

```
dbt.exceptions.DbtProjectError: Runtime Error
  no dbt_project.yml found at expected path /Users/bhart/dev/sqlfluff/dbt_project.yml
```
Never mind the questions above -- I managed to reproduce the error in a sample dbt project. Taking a look now...
@Tumble17: Have you tried setting the `encoding` parameter in `.sqlfluff`? Do you know what encoding you're using? The default is `autodetect`, and SQLFluff ""thinks"" the file uses ""Windows-1252"" encoding, which I assume is incorrect -- that's why SQLFluff is unable to write out the updated file.
I added this line to the first section of your `.sqlfluff`, and now it seems to work. I'll look into changing the behavior of `sqlfluff fix` so it doesn't erase the file when it fails.

```
encoding = utf-8
```

Assume you have access to the complete repository context with all the relevant code files.
Your task is to generate a single patch file in standard diff format that resolves the issue described above.
Output only the patch file.","diff --git a/.sqlfluff b/.sqlfluff
index 1234567..89abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef01234567",84,33
marshmallow-code__marshmallow-1359,"You are a software engineer tasked with resolving a GitHub issue.

Repository: marshmallow-code/marshmallow
Base Commit: b40a0f4e33823e6d0f341f7e8684e359a99060d1
Environment Setup Commit: 8b3a32614fd4a74e93e9a63a042e74c1fea34466
Version: 3.0
Instance ID: marshmallow-code__marshmallow-1359

Issue Description:
3.0: DateTime fields cannot be used as inner field for List or Tuple fields
Between releases 3.0.0rc8 and 3.0.0rc9, `DateTime` fields have started throwing an error when being instantiated as inner fields of container fields like `List` or `Tuple`. The snippet below works in <=3.0.0rc8 and throws the error below in >=3.0.0rc9 (and, worryingly, 3.0.0):

```python
from marshmallow import fields, Schema

class MySchema(Schema):
    times = fields.List(fields.DateTime())

s = MySchema()
```

Traceback:
```
Traceback (most recent call last):
  File ""test-mm.py"", line 8, in <module>
    s = MySchema()
  File ""/Users/victor/.pyenv/versions/marshmallow/lib/python3.6/site-packages/marshmallow/schema.py"", line 383, in __init__
    self.fields = self._init_fields()
  File ""/Users/victor/.pyenv/versions/marshmallow/lib/python3.6/site-packages/marshmallow/schema.py"", line 913, in _init_fields
    self._bind_field(field_name, field_obj)
  File ""/Users/victor/.pyenv/versions/marshmallow/lib/python3.6/site-packages/marshmallow/schema.py"", line 969, in _bind_field
    field_obj._bind_to_schema(field_name, self)
  File ""/Users/victor/.pyenv/versions/marshmallow/lib/python3.6/site-packages/marshmallow/fields.py"", line 636, in _bind_to_schema
    self.inner._bind_to_schema(field_name, self)
  File ""/Users/victor/.pyenv/versions/marshmallow/lib/python3.6/site-packages/marshmallow/fields.py"", line 1117, in _bind_to_schema
    or getattr(schema.opts, self.SCHEMA_OPTS_VAR_NAME)
AttributeError: 'List' object has no attribute 'opts'
```

It seems like it's treating the parent field as a Schema without checking that it is indeed a schema, so the `schema.opts` statement fails as fields don't have an `opts` attribute.


Hints (if any):
Thanks for reporting. I don't think I'll have time to look into this until the weekend. Would you like to send a PR? 
I'm afraid I don't have any time either, and I don't really have enough context on the `_bind_to_schema` process to make sure I'm not breaking stuff.
OK, no problem. @lafrech Will you have a chance to look into this?
I've found the patch below to fix the minimal example above, but I'm not really sure what it's missing out on or how to test it properly:
```patch
diff --git a/src/marshmallow/fields.py b/src/marshmallow/fields.py
index 0b18e7d..700732e 100644
--- a/src/marshmallow/fields.py
+++ b/src/marshmallow/fields.py
@@ -1114,7 +1114,7 @@ class DateTime(Field):
         super()._bind_to_schema(field_name, schema)
         self.format = (
             self.format
-            or getattr(schema.opts, self.SCHEMA_OPTS_VAR_NAME)
+            or getattr(getattr(schema, ""opts"", None), self.SCHEMA_OPTS_VAR_NAME, None)
             or self.DEFAULT_FORMAT
         )
```
    git difftool 3.0.0rc8 3.0.0rc9 src/marshmallow/fields.py

When reworking container stuff, I changed

```py
        self.inner.parent = self
        self.inner.name = field_name
```
into

```py
        self.inner._bind_to_schema(field_name, self)
```

AFAIR, I did this merely to avoid duplication. On second thought, I think it was the right thing to do, not only for duplication but to actually bind inner fields to the `Schema`.

Reverting this avoids the error but the inner field's `_bind_to_schema` method is not called so I'm not sure it is desirable.

I think we really mean to call that method, not only in this case but also generally.

Changing

```py
            or getattr(schema.opts, self.SCHEMA_OPTS_VAR_NAME)
```

into

```py
            or getattr(self.root.opts, self.SCHEMA_OPTS_VAR_NAME)
```

might be a better fix. Can anyone confirm (@sloria, @deckar01)?

The fix in https://github.com/marshmallow-code/marshmallow/issues/1357#issuecomment-523465528 removes the error but also the feature: `DateTime` fields buried into container fields won't respect the format set in the `Schema`.

I didn't double-check that but AFAIU, the change I mentioned above (in container stuff rework) was the right thing to do. The feature was already broken (format set in `Schema` not respected if `DateTime` field in container field) and that's just one of the issues that may arise due to the inner field not being bound to the `Schema`. But I may be wrong.
On quick glance, your analysis and fix look correct @lafrech 
Let's do that, then.

Not much time either. The first who gets the time can do it.

For the non-reg tests :

1/ a test that checks the format set in the schema is respected if the `DateTime` field is in a container field

2/ a set of tests asserting the `_bind_to_schema` method of inner fields `List`, `Dict`, `Tuple` is called from container fields (we can use `DateTime` with the same test case for that)

Perhaps 1/ is useless if 2/ is done.

Assume you have access to the complete repository context with all the relevant code files.
Your task is to generate a single patch file in standard diff format that resolves the issue described above.
Output only the patch file.","```diff
diff --git a/src/marshmallow/fields.py b/src/marshmallow/fields.py
index 0b18e7d..700732e 100644
--- a/src/marshmallow/fields.py
+++ b/src/marshmallow/fields.py
@@ -1114,7 +1114,7 @@ class DateTime(Field):
         super()._bind_to_schema(field_name, schema)
         self.format = (
             self.format
-            or getattr(schema.opts, self.SCHEMA_OPTS_VAR_NAME)
+            or getattr(getattr(schema, ""opts"", None), self.SCHEMA_OPTS_VAR_NAME, None)
             or self.DEFAULT_FORMAT
         )
```
```diff
diff --git a/src/marshmallow/fields.py b/src/marshmallow/fields.py
index 0b18e7d..700732e 100644
--- a/src/marshmallow/fields.py
+++ b/src/marshmallow/fields.py
@@ -1114,7 +1114,7 @@ class DateTime(Field):
         super()._bind_to_schema(field_name, schema)
         self.format = (
             self.format
-            or getattr(schema.opts, self.SCHEMA_OPTS_VAR_NAME)
+            or getattr(getattr(schema, ""opts"", None), self.SCHEMA_OPTS_VAR_NAME, None)
             or self.DEFAULT_FORMAT
         )
```",84,3
marshmallow-code__marshmallow-1343,"You are a software engineer tasked with resolving a GitHub issue.

Repository: marshmallow-code/marshmallow
Base Commit: 2be2d83a1a9a6d3d9b85804f3ab545cecc409bb0
Environment Setup Commit: 7015fc4333a2f32cd58c3465296e834acd4496ff
Version: 2.2
Instance ID: marshmallow-code__marshmallow-1343

Issue Description:
[version 2.20.0] TypeError: 'NoneType' object is not subscriptable
After update from version 2.19.5 to 2.20.0 I got error for code like:

```python
from marshmallow import Schema, fields, validates


class Bar(Schema):
    value = fields.String()

    @validates('value')  # <- issue here
    def validate_value(self, value):
        pass


class Foo(Schema):
    bar = fields.Nested(Bar)


sch = Foo()

sch.validate({
    'bar': 'invalid',
})
```

```
Traceback (most recent call last):
  File ""/_/bug_mschema.py"", line 19, in <module>
    'bar': 'invalid',
  File ""/_/env/lib/python3.7/site-packages/marshmallow/schema.py"", line 628, in validate
    _, errors = self._do_load(data, many, partial=partial, postprocess=False)
  File ""/_/env/lib/python3.7/site-packages/marshmallow/schema.py"", line 670, in _do_load
    index_errors=self.opts.index_errors,
  File ""/_/env/lib/python3.7/site-packages/marshmallow/marshalling.py"", line 292, in deserialize
    index=(index if index_errors else None)
  File ""/_/env/lib/python3.7/site-packages/marshmallow/marshalling.py"", line 65, in call_and_store
    value = getter_func(data)
  File ""/_/env/lib/python3.7/site-packages/marshmallow/marshalling.py"", line 285, in <lambda>
    data
  File ""/_/env/lib/python3.7/site-packages/marshmallow/fields.py"", line 265, in deserialize
    output = self._deserialize(value, attr, data)
  File ""/_/env/lib/python3.7/site-packages/marshmallow/fields.py"", line 465, in _deserialize
    data, errors = self.schema.load(value)
  File ""/_/env/lib/python3.7/site-packages/marshmallow/schema.py"", line 588, in load
    result, errors = self._do_load(data, many, partial=partial, postprocess=True)
  File ""/_/env/lib/python3.7/site-packages/marshmallow/schema.py"", line 674, in _do_load
    self._invoke_field_validators(unmarshal, data=result, many=many)
  File ""/_/env/lib/python3.7/site-packages/marshmallow/schema.py"", line 894, in _invoke_field_validators
    value = data[field_obj.attribute or field_name]
TypeError: 'NoneType' object is not subscriptable
```


Hints (if any):
Thanks for reporting. I was able to reproduce this on 2.20.0. This is likely a regression from https://github.com/marshmallow-code/marshmallow/pull/1323 . I don't have time to look into it now. Would appreciate a PR.

Assume you have access to the complete repository context with all the relevant code files.
Your task is to generate a single patch file in standard diff format that resolves the issue described above.
Output only the patch file.","```diff
diff --git ""a/marshmallow/marshmallow/schema.py"" ""b/marshmallow/marshmallow/schema.py""
--- ""a/marshmallow/marshmallow/schema.py""
+++ ""b/marshmallow/marshmallow/schema.py""
@@ -628,7 +628,7 @@ def validate(self, data, many=False, partial=False, **options):
         if not data:
             return None, None
-        if not isinstance(data, dict) and not isinstance(data, list):
+        if not isinstance(data, dict) and not isinstance(data, list) and not data:
             raise ValidationError(""Expected a dict or list"")
         if not isinstance(data, dict):
             raise ValidationError(""Expected a dict"")
@@ -670,7 +670,7 @@ def _do_load(self, data, many=False, partial=False, postprocess=False):
         if not data:
             return None, None
-        if not isinstance(data, dict) and not isinstance(data, list):
+        if not isinstance(data, dict) and not isinstance(data, list) and not data:
             raise ValidationError(""Expected a dict or list"")
         if not isinstance(data, dict):
             raise ValidationError(""Expected a dict"")
@@ -894,7 +894,7 @@ def _invoke_field_validators(self, unmarshal, data, many=None, partial=None):
         if not data:
             return None, None
-        if not isinstance(data, dict) and not isinstance(data, list):
+        if not isinstance(data, dict) and not isinstance(data, list) and not data:
             raise ValidationError(""Expected a dict or list"")
         if not isinstance(data, dict):
             raise ValidationError(""Expected a dict"")
```",86,3
pvlib__pvlib-python-1707,"You are a software engineer tasked with resolving a GitHub issue.

Repository: pvlib/pvlib-python
Base Commit: 40e9e978c170bdde4eeee1547729417665dbc34c
Environment Setup Commit: 6072e0982c3c0236f532ddfa48fbf461180d834e
Version: 0.9
Instance ID: pvlib__pvlib-python-1707

Issue Description:
regression: iam.physical returns nan for aoi > 90Â° when n = 1
**Describe the bug**
For pvlib==0.9.5, when n = 1 (no reflection) and aoi > 90Â°, we get nan as result.

**To Reproduce**
```python
import pvlib
pvlib.iam.physical(aoi=100, n=1)
```
returns `nan`.

**Expected behavior**
The result should be `0`, as it was for pvlib <= 0.9.4.


**Versions:**
 - ``pvlib.__version__``: '0.9.5'
 - ``pandas.__version__``:  '1.5.3'
 - python: 3.10.4



Hints (if any):
nan

Assume you have access to the complete repository context with all the relevant code files.
Your task is to generate a single patch file in standard diff format that resolves the issue described above.
Output only the patch file.","diff --git a/pvlib/iam/physical.py b/pvlib/iam/physical.py
index 1234567..7890123..4567890
--- a/pvlib/iam/physical.py
+++ b/pvlib/iam/physical.py
@@ -18,7 +18,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -26,7 +26,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -34,7 +34,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -42,7 +42,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -50,7 +50,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -58,7 +58,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -66,7 +66,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -74,7 +74,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -82,7 +82,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -90,7 +90,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -98,7 +98,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -106,7 +106,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -114,7 +114,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -122,7 +122,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -129,7 +129,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -137,7 +137,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -145,7 +145,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -153,7 +153,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -161,7 +161,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -169,7 +169,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -177,7 +177,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -185,7 +185,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if aoi > 90:
+    if aoi > 90.0:
         raise ValueError(""aoi > 90Â° is not supported"")
     if n == 1:
         return 0.0
@@ -193,7 +193,7 @@ def physical(aoi, n):
     """"""
     Returns the physical irradiance at the given angle of incidence.
     """"""
-    if a",90,18
pvlib__pvlib-python-1072,"You are a software engineer tasked with resolving a GitHub issue.

Repository: pvlib/pvlib-python
Base Commit: 04a523fafbd61bc2e49420963b84ed8e2bd1b3cf
Environment Setup Commit: 6e5148f59c5050e8f7a0084b7ae39e93b80f72e6
Version: 0.7
Instance ID: pvlib__pvlib-python-1072

Issue Description:
temperature.fuentes errors when given tz-aware inputs on pandas>=1.0.0
**Describe the bug**
When the weather timeseries inputs to `temperature.fuentes` have tz-aware index, an internal call to `np.diff(index)` returns an array of `Timedelta` objects instead of an array of nanosecond ints, throwing an error immediately after.  The error only happens when using pandas>=1.0.0; using 0.25.3 runs successfully, but emits the warning:

```
  /home/kevin/anaconda3/envs/pvlib-dev/lib/python3.7/site-packages/numpy/lib/function_base.py:1243: FutureWarning: Converting timezone-aware DatetimeArray to timezone-naive ndarray with 'datetime64[ns]' dtype. In the future, this will return an ndarray with 'object' dtype where each element is a 'pandas.Timestamp' with the correct 'tz'.
  	To accept the future behavior, pass 'dtype=object'.
  	To keep the old behavior, pass 'dtype=""datetime64[ns]""'.
    a = asanyarray(a)
```

**To Reproduce**
```python
In [1]: import pvlib
   ...: import pandas as pd
   ...: 
   ...: index_naive = pd.date_range('2019-01-01', freq='h', periods=3)
   ...: 
   ...: kwargs = {
   ...:     'poa_global': pd.Series(1000, index_naive),
   ...:     'temp_air': pd.Series(20, index_naive),
   ...:     'wind_speed': pd.Series(1, index_naive),
   ...:     'noct_installed': 45
   ...: }
   ...: 

In [2]: print(pvlib.temperature.fuentes(**kwargs))
2019-01-01 00:00:00    47.85
2019-01-01 01:00:00    50.85
2019-01-01 02:00:00    50.85
Freq: H, Name: tmod, dtype: float64

In [3]: kwargs['poa_global'].index = index_naive.tz_localize('UTC')
   ...: print(pvlib.temperature.fuentes(**kwargs))
   ...: 
Traceback (most recent call last):

  File ""<ipython-input-3-ff99badadc91>"", line 2, in <module>
    print(pvlib.temperature.fuentes(**kwargs))

  File ""/home/kevin/anaconda3/lib/python3.7/site-packages/pvlib/temperature.py"", line 602, in fuentes
    timedelta_hours = np.diff(poa_global.index).astype(float) / 1e9 / 60 / 60

TypeError: float() argument must be a string or a number, not 'Timedelta'
```

**Expected behavior**
`temperature.fuentes` should work with both tz-naive and tz-aware inputs.


**Versions:**
 - ``pvlib.__version__``: 0.8.0
 - ``pandas.__version__``: 1.0.0+
 - python: 3.7.4 (default, Aug 13 2019, 20:35:49) \n[GCC 7.3.0]




Hints (if any):
nan

Assume you have access to the complete repository context with all the relevant code files.
Your task is to generate a single patch file in standard diff format that resolves the issue described above.
Output only the patch file.","```diff
diff --git a/pvlib/temperature.py b/pvlib/temperature.py
index 1234...5678 add new code
--- a/pvlib/temperature.py
+++ b/pvlib/temperature.py
@@ -600,6 +600,7 @@ def fuentes(self, **kwargs):
         # Calculate the time difference between consecutive measurements
         timedelta_hours = np.diff(poa_global.index).astype(float) / 1e9 / 60 / 60
         # Calculate the temperature difference
+        timedelta_hours = timedelta_hours.astype(int)
         # Calculate the temperature difference
         temp_diff = (poa_global - poa_global.shift(1)).mean()
         # Calculate the temperature difference
```",89,4
pvlib__pvlib-python-1606,"You are a software engineer tasked with resolving a GitHub issue.

Repository: pvlib/pvlib-python
Base Commit: c78b50f4337ecbe536a961336ca91a1176efc0e8
Environment Setup Commit: ef8ad2fee9840a77d14b0dfd17fc489dd85c9b91
Version: 0.8
Instance ID: pvlib__pvlib-python-1606

Issue Description:
golden-section search fails when upper and lower bounds are equal
**Describe the bug**
I was using pvlib for sometime now and until now I was always passing a big dataframe containing readings of a long period. Because of some changes in our software architecture, I need to pass the weather readings as a single reading (a dataframe with only one row) and I noticed that for readings that GHI-DHI are zero pvlib fails to calculate the output and returns below error while the same code executes correctly with weather information that has non-zero GHI-DHI:
```python
import os
import pathlib
import time
import json
from datetime import datetime
from time import mktime, gmtime

import pandas as pd

from pvlib import pvsystem
from pvlib import location as pvlocation
from pvlib import modelchain
from pvlib.temperature import TEMPERATURE_MODEL_PARAMETERS as PARAMS # not used -- to remove
from pvlib.bifacial.pvfactors import pvfactors_timeseries
from pvlib.temperature import TEMPERATURE_MODEL_PARAMETERS

class PV:
    def pv_transform_time(self, val):
        # tt = gmtime(val / 1000)
        tt = gmtime(val)
        dd = datetime.fromtimestamp(mktime(tt))
        timestamp = pd.Timestamp(dd)
        return timestamp

    def __init__(self, model: str, inverter: str, latitude: float, longitude: float, **kwargs):
        # super().__init__(**kwargs)

        temperature_model_parameters = TEMPERATURE_MODEL_PARAMETERS[""sapm""][
            ""open_rack_glass_glass""
        ]
        # Load the database of CEC module model parameters
        modules = pvsystem.retrieve_sam(""cecmod"")
        # Load the database of CEC inverter model parameters
        inverters = pvsystem.retrieve_sam(""cecinverter"")


        # A bare bone PV simulator

        # Load the database of CEC module model parameters
        modules = pvsystem.retrieve_sam('cecmod')
        inverters = pvsystem.retrieve_sam('cecinverter')
        module_parameters = modules[model]
        inverter_parameters = inverters[inverter]

        location = pvlocation.Location(latitude=latitude, longitude=longitude)
        system = pvsystem.PVSystem(module_parameters=module_parameters, inverter_parameters=inverter_parameters, temperature_model_parameters=temperature_model_parameters)
        self.modelchain = modelchain.ModelChain(system, location, aoi_model='no_loss', spectral_model=""no_loss"")

    def process(self, data):
        weather = pd.read_json(data)
        # print(f""raw_weather: {weather}"")
        weather.drop('time.1', axis=1, inplace=True)
        weather['time'] = pd.to_datetime(weather['time']).map(datetime.timestamp) # --> this works for the new process_weather code and also the old weather file
        weather[""time""] = weather[""time""].apply(self.pv_transform_time)
        weather.index = weather[""time""]
        # print(f""weather: {weather}"")
        # print(weather.dtypes)
        # print(weather['ghi'][0])
        # print(type(weather['ghi'][0]))

        # simulate
        self.modelchain.run_model(weather)
        # print(self.modelchain.results.ac.to_frame().to_json())
        print(self.modelchain.results.ac)


# good data
good_data = ""{\""time\"":{\""12\"":\""2010-01-01 13:30:00+00:00\""},\""ghi\"":{\""12\"":36},\""dhi\"":{\""12\"":36},\""dni\"":{\""12\"":0},\""Tamb\"":{\""12\"":8.0},\""WindVel\"":{\""12\"":5.0},\""WindDir\"":{\""12\"":270},\""time.1\"":{\""12\"":\""2010-01-01 13:30:00+00:00\""}}""

# data that causes error
data = ""{\""time\"":{\""4\"":\""2010-01-01 05:30:00+00:00\""},\""ghi\"":{\""4\"":0},\""dhi\"":{\""4\"":0},\""dni\"":{\""4\"":0},\""Tamb\"":{\""4\"":8.0},\""WindVel\"":{\""4\"":4.0},\""WindDir\"":{\""4\"":240},\""time.1\"":{\""4\"":\""2010-01-01 05:30:00+00:00\""}}""
p1 = PV(model=""Trina_Solar_TSM_300DEG5C_07_II_"", inverter=""ABB__MICRO_0_25_I_OUTD_US_208__208V_"", latitude=51.204483, longitude=5.265472)
p1.process(good_data)
print(""====="")
p1.process(data)
```
Error:
```log
$ python3 ./tmp-pv.py 
time
2010-01-01 13:30:00    7.825527
dtype: float64
=====
/home/user/.local/lib/python3.10/site-packages/pvlib/tools.py:340: RuntimeWarning: divide by zero encountered in divide
  np.trunc(np.log(atol / (df['VH'] - df['VL'])) / np.log(phim1)))
Traceback (most recent call last):
  File ""/home/user/workspace/enorch/simulator/simulator_processor/src/pv/./tmp-pv.py"", line 88, in <module>
    p1.process(data)
  File ""/home/user/workspace/enorch/simulator/simulator_processor/src/pv/./tmp-pv.py"", line 75, in process
    self.modelchain.run_model(weather)
  File ""/home/user/.local/lib/python3.10/site-packages/pvlib/modelchain.py"", line 1770, in run_model
    self._run_from_effective_irrad(weather)
  File ""/home/user/.local/lib/python3.10/site-packages/pvlib/modelchain.py"", line 1858, in _run_from_effective_irrad
    self.dc_model()
  File ""/home/user/.local/lib/python3.10/site-packages/pvlib/modelchain.py"", line 790, in cec
    return self._singlediode(self.system.calcparams_cec)
  File ""/home/user/.local/lib/python3.10/site-packages/pvlib/modelchain.py"", line 772, in _singlediode
    self.results.dc = tuple(itertools.starmap(
  File ""/home/user/.local/lib/python3.10/site-packages/pvlib/pvsystem.py"", line 931, in singlediode
    return singlediode(photocurrent, saturation_current,
  File ""/home/user/.local/lib/python3.10/site-packages/pvlib/pvsystem.py"", line 2826, in singlediode
    out = _singlediode._lambertw(
  File ""/home/user/.local/lib/python3.10/site-packages/pvlib/singlediode.py"", line 651, in _lambertw
    p_mp, v_mp = _golden_sect_DataFrame(params, 0., v_oc * 1.14,
  File ""/home/user/.local/lib/python3.10/site-packages/pvlib/tools.py"", line 364, in _golden_sect_DataFrame
    raise Exception(""Iterations exceeded maximum. Check that func"",
Exception: ('Iterations exceeded maximum. Check that func', ' is not NaN in (lower, upper)')
```

I have to mention that for now the workaround that I am using is to pass the weather data as a dataframe with two rows, the first row is a good weather data that pvlib can process and the second row is the incoming weather reading (I can also post that code if you want).

**Expected behavior**
PVlib should have consistent behavior and regardless of GHI-DHI readings.

**Versions:**
```python
>>> import pvlib
>>> import pandas
>>> pvlib.__version__
'0.9.1'
>>> pandas.__version__
'1.4.3'
``` 
 - python: 3.10.6
- OS: Ubuntu 22.04.1 LTS


Hints (if any):
Confirmed. This appears to be an oversight in `pvlib.tools._golden_section_DataFrame` involving error messaging, likely introduced with #1089 .

In this code when processing the content of `data`, photocurrent is 0., hence the shunt resistance is infinite and v_oc is 0. That sets the range for the golden section search to be [0., 0.]. [iterlimit](https://github.com/pvlib/pvlib-python/blob/582b956c63c463e5178fbb7a88fa545fa5b1c257/pvlib/tools.py#L358) is then -infinity, which skips the loop (`iterations <= iterlimit`) but since `iterations > iterlimit` raises the ""Iterations exceeded..."" exception.


Assume you have access to the complete repository context with all the relevant code files.
Your task is to generate a single patch file in standard diff format that resolves the issue described above.
Output only the patch file.","```diff
diff --git ""pvlib/pvlib/tools.py"" ""pvlib/pvlib/tools.py""
--- ""pvlib/pvlib/tools.py""
+++ ""pvlib/pvlib/tools.py""
@@ -358,7 +358,7 @@ def _golden_section_search(self, func, func_args, func_kwargs, lower, upper, tol
     def _golden_section_search(self, func, func_args, func_kwargs, lower, upper, tol
         # Golden section search
         # https://en.wikipedia.org/wiki/Golden_section_search
-        if func(*func_args, **func_kwargs) == 0.:
+        if func(*func_args, **func_kwargs) == 0.:
             # If func is zero, then func_args[0] is the root
             # If func is not zero, then func_args[1] is the root
             # If func is not defined, then func_args[2] is the root
```",89,3
