instance_id,prompt,response,tokens_per_sec,seconds
sqlfluff__sqlfluff-1625,"You are a software engineer tasked with resolving a GitHub issue.

Repository: sqlfluff/sqlfluff
Base Commit: 14e1a23a3166b9a645a16de96f694c77a5d4abb7
Environment Setup Commit: 67023b85c41d23d6c6d69812a41b207c4f8a9331
Version: 0.6
Instance ID: sqlfluff__sqlfluff-1625

Issue Description:
TSQL - L031 incorrectly triggers ""Avoid using aliases in join condition"" when no join present
## Expected Behaviour

Both of these queries should pass, the only difference is the addition of a table alias 'a':

1/ no alias

```
SELECT [hello]
FROM
    mytable
```

2/ same query with alias

```
SELECT a.[hello]
FROM
    mytable AS a
```

## Observed Behaviour

1/ passes
2/ fails with: L031: Avoid using aliases in join condition.

But there is no join condition :-)

## Steps to Reproduce

Lint queries above

## Dialect

TSQL

## Version

sqlfluff 0.6.9
Python 3.6.9

## Configuration

N/A


Hints (if any):
Actually, re-reading the docs I think this is the intended behaviour... closing

Assume you have access to the complete repository context with all the relevant code files.
Your task is to generate a single patch file in standard diff format that resolves the issue described above.
Output only the patch file.","```diff
diff --git a/sqlfluff/rules/line_length.py b/sqlfluff/rules/line_length.py
index 1234567..89abcdef 100644
--- a/sqlfluff/rules/line_length.py
+++ b/sqlfluff/rules/line_length.py
@@ -1,6 +1,7 @@
 from sqlfluff.core.parser import BaseParserContext, RuleContext
 from sqlfluff.core.rules.base import BaseRule, RuleContextType
+from sqlfluff.core.rules.context import ContextType

 class LineLengthRule(BaseRule):
     """"""Enforce a maximum line length.""""""
@@ -20,6 +21,7 @@ class LineLengthRule(BaseRule):
         self.max_length = max_length
         self.context_type = context_type

+    def __call__(self, context: RuleContext) -> bool:
         if not isinstance(context, ContextType):
             raise TypeError(""Expected a RuleContext instance."")
```

This patch file adds a new method `__call__` to the `LineLengthRule` class, which checks if the context is of type `ContextType`. If it is, the rule will be applied; otherwise, a `TypeError` will be raised. This should resolve the issue where the rule incorrectly triggers for queries without joins.",104,5
sqlfluff__sqlfluff-2419,"You are a software engineer tasked with resolving a GitHub issue.

Repository: sqlfluff/sqlfluff
Base Commit: f1dba0e1dd764ae72d67c3d5e1471cf14d3db030
Environment Setup Commit: a5c4eae4e3e419fe95460c9afd9cf39a35a470c4
Version: 0.8
Instance ID: sqlfluff__sqlfluff-2419

Issue Description:
Rule L060 could give a specific error message
At the moment rule L060 flags something like this:

```
L:  21 | P:   9 | L060 | Use 'COALESCE' instead of 'IFNULL' or 'NVL'.
```

Since we likely know the wrong word, it might be nice to actually flag that instead of both `IFNULL` and `NVL` - like most of the other rules do.

That is it should flag this:

```
L:  21 | P:   9 | L060 | Use 'COALESCE' instead of 'IFNULL'.
```
 Or this:

```
L:  21 | P:   9 | L060 | Use 'COALESCE' instead of 'NVL'.
```

As appropriate.

What do you think @jpy-git ?



Hints (if any):
@tunetheweb Yeah definitely, should be a pretty quick change ğŸ˜Š

Assume you have access to the complete repository context with all the relevant code files.
Your task is to generate a single patch file in standard diff format that resolves the issue described above.
Output only the patch file.","```diff
diff --git a/sqlfluff/core/rules/base.py b/sqlfluff/core/rules/base.py
index 1234567..89abcdef 100644
--- a/sqlfluff/core/rules/base.py
+++ b/sqlfluff/core/rules/base.py
@@ -123,7 +123,7 @@ class BaseRule(Rule):
         # Check if the rule applies to the context
         if not self.applies_to(context):
             return None

-        # Get the error message for the rule
+        # Get the specific error message for the rule
         error_message = self.get_error_message(context)

         # If the error message is not empty, return it
         if error_message:
```",106,2
sqlfluff__sqlfluff-1733,"You are a software engineer tasked with resolving a GitHub issue.

Repository: sqlfluff/sqlfluff
Base Commit: a1579a16b1d8913d9d7c7d12add374a290bcc78c
Environment Setup Commit: 67023b85c41d23d6c6d69812a41b207c4f8a9331
Version: 0.6
Instance ID: sqlfluff__sqlfluff-1733

Issue Description:
Extra space when first field moved to new line in a WITH statement
Note, the query below uses a `WITH` statement. If I just try to fix the SQL within the CTE, this works fine.

Given the following SQL:

```sql
WITH example AS (
    SELECT my_id,
        other_thing,
        one_more
    FROM
        my_table
)

SELECT *
FROM example
```

## Expected Behaviour

after running `sqlfluff fix` I'd expect (`my_id` gets moved down and indented properly):

```sql
WITH example AS (
    SELECT
        my_id,
        other_thing,
        one_more
    FROM
        my_table
)

SELECT *
FROM example
```

## Observed Behaviour

after running `sqlfluff fix` we get (notice that `my_id` is indented one extra space)

```sql
WITH example AS (
    SELECT
         my_id,
        other_thing,
        one_more
    FROM
        my_table
)

SELECT *
FROM example
```

## Steps to Reproduce

Noted above. Create a file with the initial SQL and fun `sqfluff fix` on it.

## Dialect

Running with default config.

## Version
Include the output of `sqlfluff --version` along with your Python version

sqlfluff, version 0.7.0
Python 3.7.5

## Configuration

Default config.



Hints (if any):
Does running `sqlfluff fix` again correct the SQL?
@tunetheweb yes, yes it does. Is that something that the user is supposed to do (run it multiple times) or is this indeed a bug?
Ideally not, but there are some circumstances where itâ€™s understandable that would happen. This however seems an easy enough example where it should not happen.
This appears to be a combination of rules L036, L003, and L039 not playing nicely together.

The original error is rule L036 and it produces this:

```sql
WITH example AS (
    SELECT
my_id,
        other_thing,
        one_more
    FROM
        my_table
)

SELECT *
FROM example
```

That is, it moves the `my_id` down to the newline but does not even try to fix the indentation.

Then we have another run through and L003 spots the lack of indentation and fixes it by adding the first set of whitespace:

```sql
WITH example AS (
    SELECT
    my_id,
        other_thing,
        one_more
    FROM
        my_table
)

SELECT *
FROM example
```

Then we have another run through and L003 spots that there still isn't enough indentation and fixes it by adding the second set of whitespace:

```sql
WITH example AS (
    SELECT
        my_id,
        other_thing,
        one_more
    FROM
        my_table
)

SELECT *
FROM example
```

At this point we're all good.

However then L039 has a look. It never expects two sets of whitespace following a new line and is specifically coded to only assume one set of spaces (which it normally would be if the other rules hadn't interfered as it would be parsed as one big space), so it think's the second set is too much indentation, so it replaces it with a single space.

Then another run and L003 and the whitespace back in so we end up with two indents, and a single space.

Luckily the fix is easier than that explanation. PR coming up...



Assume you have access to the complete repository context with all the relevant code files.
Your task is to generate a single patch file in standard diff format that resolves the issue described above.
Output only the patch file.","```diff
diff --git a/sqlfluff/rules/line_length.py b/sqlfluff/rules/line_length.py
index 1234567..89abcdef 100644
--- a/sqlfluff/rules/line_length.py
+++ b/sqlfluff/rules/line_length.py
@@ -123,7 +123,7 @@ class LineLengthRule(Rule):
                 # Check if the line is too long
                 if len(line) > self.max_line_length:
                     # If it is, split the line at the last comma or semicolon
-                    parts = line.split(', ')
+                    parts = line.split(',;')
                     # Join the parts with a newline and a space
                     new_line = '\n' + ' '.join(parts)
                     # Replace the original line with the new line
diff --git a/sqlfluff/rules/indentation.py b/sqlfluff/rules/indentation.py
index 1234567..89abcdef 100644
--- a/sqlfluff/rules/indentation.py
+++ b/sqlfluff/rules/indentation.py
@@ -123,7 +123,7 @@ class IndentationRule(Rule):
                 # Check if the line is indented too much
                 if len(line) > self.max_indent_length:
                     # If it is, split the line at the last comma or semicolon
-                    parts = line.split(', ')
+                    parts = line.split(',;')
                     # Join the parts with a newline and a space
                     new_line = '\n' + ' '.join(parts)
                     # Replace the original line with the new line
```",103,4
